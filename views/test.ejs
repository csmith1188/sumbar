<%- include('partials/head') %>
<div id="content">
  <h1>Python Code Runner</h1>

</div>
</body>
<script src="/socket.io/socket.io.js"></script>
<script>
  const content = document.getElementById('content');

  /*
   ######                                               ######
   #     # #####   ####  #####  #      ###### #    #    #     #  ####  #    #
   #     # #    # #    # #    # #      #      ##  ##    #     # #    #  #  #
   ######  #    # #    # #####  #      #####  # ## #    ######  #    #   ##
   #       #####  #    # #    # #      #      #    #    #     # #    #   ##
   #       #   #  #    # #    # #      #      #    #    #     # #    #  #  #
   #       #    #  ####  #####  ###### ###### #    #    ######   ####  #    #

  */
  const problemPrompt = document.createElement('div');
  problemPrompt.id = 'problemPrompt';
  const loader = document.createElement('img');
  loader.id = 'loaderGif';
  loader.src = '/img/loader.gif';
  loader.alt = 'Loading...';
  problemPrompt.appendChild(loader);
  content.appendChild(problemPrompt);

  const precode = document.createElement('div');
  precode.id = 'precode';
  precode.className = 'codebox';
  precode.innerHTML = `<pre></pre>`;
  content.appendChild(precode);

  const usercode = document.createElement('textarea');
  usercode.id = 'usercode';
  usercode.className = 'codebox';
  content.appendChild(usercode);
  usercode.addEventListener("keydown", function(e) {
    if (e.key === "Tab") {
      e.preventDefault();
      const start = this.selectionStart;
      const end = this.selectionEnd;
      this.value = this.value.substring(0, start) + "\t" + this.value.substring(end);
      this.selectionStart = this.selectionEnd = start + 1;
    }
  });

  usercode.addEventListener('input', function() {
    this.style.height = 'auto';
    this.style.height = (this.scrollHeight) + 'px';
  });

  const postcode = document.createElement('div');
  postcode.id = 'postcode';
  postcode.className = 'codebox';
  postcode.innerHTML = `<pre></pre>`;
  content.appendChild(postcode);

  const buttonContainer = document.createElement('div');
  buttonContainer.id = 'buttonContainer';
  content.appendChild(buttonContainer);

  const output = document.createElement('div');
  output.id = 'outputBox';
  output.className = 'codebox';
  output.innerHTML = '<pre id="output"></pre>';
  content.appendChild(output);

  /*
    #####
   #     #  ####  #    # ##### #####   ####  #       ####
   #       #    # ##   #   #   #    # #    # #      #
   #       #    # # #  #   #   #    # #    # #       ####
   #       #    # #  # #   #   #####  #    # #           #
   #     # #    # #   ##   #   #   #  #    # #      #    #
    #####   ####  #    #   #   #    #  ####  ######  ####

  */

  function showThumbs() {
    buttonContainer.innerHTML = '';
    const upButton = document.createElement('button');
    upButton.id = 'upButton';
    upButton.textContent = 'Up';
    buttonContainer.appendChild(upButton);
    upButton.addEventListener("click", () => {
      socket.emit('run_code', {
        usercode: usercode.value,
        confidence: 'up'
      });
    });

    const wiggleButton = document.createElement('button');
    wiggleButton.id = 'wiggleButton';
    wiggleButton.textContent = 'Wiggle';
    buttonContainer.appendChild(wiggleButton);
    wiggleButton.addEventListener("click", () => {
      socket.emit('run_code', {
        usercode: usercode.value,
        confidence: 'wiggle'
      });
    });

    const downButton = document.createElement('button');
    downButton.id = 'downButton';
    downButton.textContent = 'Down';
    buttonContainer.appendChild(downButton);
    downButton.addEventListener("click", () => {
      buttonContainer.appendChild(loader);
      socket.emit('run_code', {
        usercode: usercode.value,
        confidence: 'down'
      });
    });
  }

  function addNextButton() {
    buttonContainer.innerHTML = '';
    const nextButton = document.createElement('button');
    nextButton.id = 'nextButton';
    nextButton.textContent = 'Next';
    buttonContainer.appendChild(nextButton);
    nextButton.addEventListener("click", () => {
      output.innerHTML = '<pre></pre>';
      buttonContainer.appendChild(loader);
      socket.emit('nextProblem');
    });
  }

  function addGradeButton() {
    buttonContainer.innerHTML = '';
    const gradeButton = document.createElement('button');
    gradeButton.id = 'gradeButton';
    gradeButton.textContent = 'Grade';
    buttonContainer.appendChild(gradeButton);
    gradeButton.addEventListener("click", () => {
      output.innerHTML = '<pre></pre>';
      buttonContainer.appendChild(loader);
      socket.emit('grade');
    });
  }

  /*

    ####   ####   ####  #    # ###### #####
   #      #    # #    # #   #  #        #
    ####  #    # #      ####   #####    #
        # #    # #      #  #   #        #
   #    # #    # #    # #   #  #        #
    ####   ####   ####  #    # ######   #

  */

  const socket = io();

  socket.on('connect', () => {
    console.log('Connected to server');
  });

  socket.on('disconnect', () => {
    console.log('Disconnected from server');
  });

  socket.on('handlerReady', (data) => {
    console.log(data.message);
    socket.emit('nextProblem');
  });

  socket.on('problem', (data) => {
    problemPrompt.innerHTML = '';
    if (data.problem.result == 1) {
      problemPrompt.innerHTML = `You've gotten this problem correct before. `;
    } else if (data.problem.result == 0) {
      problemPrompt.innerHTML = `You've gotten this problem incorrect before. `;
    } else {
      problemPrompt.innerHTML = `You've never seen this problem before. `;
    }
    switch (data.problem.confidence) {
      case 'up':
        problemPrompt.innerHTML += `You seemed pretty confident. `;
        break;
      case 'wiggle':
        problemPrompt.innerHTML += `You weren't sure of yourself. `;
        break;
      case 'down':
        problemPrompt.innerHTML += `You didn't think you'd get this one. `;
        break;
    }
    problemPrompt.innerHTML += `<p>${data.problem.prompt}</p>`;
    precode.querySelector('pre').textContent = data.problem.precode;
    usercode.value = data.problem.usercode;
    postcode.querySelector('pre').textContent = data.problem.postcode;
    showThumbs();
  });

  socket.on('output', (data) => {

    navigator.clipboard.writeText(data.output).then(() => {
      console.log('Output copied to clipboard');
    }).catch(err => {
      console.error('Failed to copy output: ', err);
    });

    if (data.correct) {
      output.classList.add('correct');
      output.classList.remove('incorrect');
    } else {
      output.classList.add('incorrect');
      output.classList.remove('correct');
    }
    addNextButton();
    output.querySelector('pre').textContent = data.output || data.error;
  });

  socket.on('testComplete', () => {
    buttonContainer.innerHTML = '';
    addGradeButton()
  });
</script>