<%- include('partials/head') %>
<div id="content">
  <h1>Assign Test</h1>
  <button onclick="assign('class');">To Entire Class</button>
  <button onclick="unassign('class');">Unassign Class</button>
  <details>
    <summary>Assign to Student</summary>
    Forthcoming...
  </details>

  <h1>Edit Test</h1>
  <% problems.forEach(function(problem) { %>
  <div class="problem">
    <details>
      <summary>
        <span class="tag courseTag">
          <%= problem.course_name %>
        </span> ||
        <span class="tag unitTag">
          <%= problem.unit_name %>
        </span> ||
        <span class="tag taskTag">
          <%= problem.task_name %>
        </span> ||
        <%= problem.prompt %>
      </summary>
      <p>
      <pre><%= problem.precode %></pre>
      </p>
      <p>
      <pre><%= problem.usercode %></pre>
      </p>
      <p>
      <pre><%= problem.postcode %></pre>
      </p>
      <p>
      <pre><%= problem.match %></pre>
      </p>
    </details>
    <button onclick="writeProblem(<%- problem.problem_id %>)">View</button>
    <button onclick="removeProblem(<%- problem.problem_id %>)">Remove</button>
  </div>
  <% }); %>
  <div id="addBox">
    <select id="courseSelect">
      <option value="">Loading...</option>
    </select>
    <select id="unitSelect">
      <option value="">Select Course</option>
    </select>
    <select id="taskSelect">
      <option value="">Select Unit</option>
    </select>
    <select id="problemSelect">
      <option value="">Select Task</option>
    </select>
    <div id="problemBox">

    </div>
  </div>
</div>

</body>
<script src="/socket.io/socket.io.js"></script>
<script>
  const addBox = document.getElementById('addBox');
  const courseSelect = document.getElementById('courseSelect');
  const unitSelect = document.getElementById('unitSelect');
  const taskSelect = document.getElementById('taskSelect');
  const problemSelect = document.getElementById('problemSelect');
  const problemBox = document.getElementById('problemBox');
  let test = <%- JSON.stringify(test) %>;
  let testProblems = <%- JSON.stringify(problems) %>;
  let taskProblems = [];
  let problem = null;

  function writeProblem(specific) {
    if (specific) {
      problem = taskProblems.find(p => p.uid == specific);
    } else {
      problem = {
        course_id: courseSelect.value,
        unit_id: unitSelect.value,
        task_id: taskSelect.value,
        language: 'python',
        prompt: 'Instructions for the tester',
        precode: '#Code that will run before the user code',
        usercode: '#Placeholder code for the tester to start',
        postcode: '#Code to test the user code',
        solution: '#A possible solution to the problem',
        match: '#The expected output of the user code'
      };
    }

    problemBox.innerHTML = '';

    const promptTextarea = document.createElement('textarea');
    promptTextarea.id = 'precode';
    promptTextarea.classList.add('codebox');
    promptTextarea.textContent = problem.prompt;
    promptTextarea.addEventListener('input', function() {
      this.style.height = 'auto';
      this.style.height = (this.scrollHeight) + 'px';
    });

    const precodeTextarea = document.createElement('textarea');
    precodeTextarea.id = 'precode';
    precodeTextarea.classList.add('codebox');
    precodeTextarea.textContent = problem.precode;
    precodeTextarea.addEventListener('input', function() {
      this.style.height = 'auto';
      this.style.height = (this.scrollHeight) + 'px';
    });

    const usercodeTextarea = document.createElement('textarea');
    usercodeTextarea.id = 'usercode';
    usercodeTextarea.classList.add('codebox');
    usercodeTextarea.textContent = problem.usercode;
    usercodeTextarea.addEventListener('input', function() {
      this.style.height = 'auto';
      this.style.height = (this.scrollHeight) + 'px';
    });

    const postcodeTextarea = document.createElement('textarea');
    postcodeTextarea.id = 'postcode';
    postcodeTextarea.classList.add('codebox');
    postcodeTextarea.textContent = problem.postcode;
    postcodeTextarea.addEventListener('input', function() {
      this.style.height = 'auto';
      this.style.height = (this.scrollHeight) + 'px';
    });

    const solutionTextarea = document.createElement('textarea');
    solutionTextarea.id = 'solution';
    solutionTextarea.classList.add('codebox');
    solutionTextarea.textContent = problem.solution;
    solutionTextarea.addEventListener('input', function() {
      this.style.height = 'auto';
      this.style.height = (this.scrollHeight) + 'px';
    });

    const matchTextarea = document.createElement('textarea');
    matchTextarea.id = 'match';
    matchTextarea.classList.add('codebox');
    matchTextarea.textContent = problem.match;
    matchTextarea.addEventListener('input', function() {
      this.style.height = 'auto';
      this.style.height = (this.scrollHeight) + 'px';
    });

    const evalButton = document.createElement('button');
    evalButton.id = 'eval';
    evalButton.textContent = 'Evaluate Problem';
    evalButton.addEventListener('click', () => {
      problem.precode = precodeTextarea.value;
      problem.usercode = usercodeTextarea.value;
      problem.postcode = postcodeTextarea.value;
      socket.emit('evalProblem', problem);
    });

    const saveButton = document.createElement('button');
    saveButton.id = 'save';
    saveButton.textContent = 'Save';
    saveButton.addEventListener('click', () => {
      problem.prompt = promptTextarea.value;
      problem.precode = precodeTextarea.value;
      problem.usercode = usercodeTextarea.value;
      problem.postcode = postcodeTextarea.value;
      problem.solution = solutionTextarea.value;
      problem.match = matchTextarea.value;
      problem.index = taskProblems.length;
      problem.test_id = test.uid;
      socket.emit('saveProblem', problem);
      window.location.reload();
    });

    problemBox.appendChild(promptTextarea);
    problemBox.appendChild(precodeTextarea);
    problemBox.appendChild(usercodeTextarea);
    problemBox.appendChild(postcodeTextarea);
    problemBox.appendChild(matchTextarea);
    problemBox.appendChild(evalButton);
    problemBox.appendChild(saveButton);
  }

  problemSelect.addEventListener('change', () => {
    if (problemSelect.value == 'new') writeProblem();
    else if (problemSelect.value == 'none') problemBox.innerHTML = '';
    else writeProblem(problemSelect.value);;
  });

  removeProblem = (id) => {
    socket.emit('removeProblem', {
      test: test.uid,
      problem: id
    });
    window.location.reload();
  }

  function assign(type) {
    if (type == 'class') {
      socket.emit('assignTest', {
        test: test.uid,
        class: '<%- token.class %>'
      });
    }
  }

  function unassign(type) {
    if (type == 'class') {
      socket.emit('unassignTest', {
        test: test.uid,
        class: '<%- token.class %>'
      });
    }
    
  }

  const socket = io();

  socket.on('connect', () => {
    console.log('Connected to server');
    socket.emit('getCourses');
  });

  socket.on('disconnect', () => {
    console.log('Disconnected from server');
  });

  socket.on('courseList', (data) => {
    courseSelect.innerHTML = '';
    data.courses.forEach(course => {
      const option = document.createElement('option');
      option.value = course.uid;
      option.textContent = course.name;
      courseSelect.appendChild(option);
    });
    socket.emit('getUnits', {
      course_id: courseSelect.value
    });
  });

  socket.on('unitList', (data) => {
    unitSelect.innerHTML = '';
    data.units.forEach(unit => {
      const option = document.createElement('option');
      option.value = unit.uid;
      option.textContent = unit.name;
      unitSelect.appendChild(option);
    });
    socket.emit('getTasks', {
      unit_id: unitSelect.value
    });
  });

  socket.on('taskList', (data) => {
    taskSelect.innerHTML = '';
    data.tasks.forEach(task => {
      const option = document.createElement('option');
      option.value = task.uid;
      option.textContent = task.name;
      taskSelect.appendChild(option);
    });
    socket.emit('getProblems', {
      task_id: taskSelect.value
    });
  });

  socket.on('problemList', (data) => {
    problemSelect.innerHTML = '';
    const noOptions = document.createElement('option');
    noOptions.value = "none";
    noOptions.textContent = "Select Problem...";
    problemSelect.appendChild(noOptions);
    const newOption = document.createElement('option');
    newOption.value = "new";
    newOption.textContent = "New Problem";
    problemSelect.appendChild(newOption);
    data.problems.forEach(problem => {
      const option = document.createElement('option');
      option.value = problem.uid;
      option.textContent = problem.prompt;
      problemSelect.appendChild(option);
    });
    taskProblems = data.problems;
  });

  socket.on('output', (data) => {
    document.getElementById('match').innerHTML = data.output;
  });
</script>
<%- include('partials/foot') %>